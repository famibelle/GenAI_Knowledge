#!/usr/bin/env python3
"""
Script de g√©n√©ration vocale optimis√© pour le fran√ßais avec support GPU
Bas√© sur XTTS-v2 avec am√©liorations pour la prononciation fran√ßaise
"""

import torch
import pandas as pd
import os
import re
import time
from pathlib import Path
from typing import List, Optional
from tqdm import tqdm

# Import TTS
from TTS.api import TTS
from TTS.tts.models.xtts import XttsArgs

# Configuration et param√®tres
class VoiceConfig:
    """Configuration centralis√©e pour la g√©n√©ration vocale"""
    
    # Chemins des fichiers
    EXCEL_PATH = "VoixOff/Voix Off.xlsx"
    REFERENCE_WAV = "Voices/M√©dhiCloneHigh.wav"
    OUTPUT_DIR = "Generated"
    
    # Configuration GPU
    USE_GPU = torch.cuda.is_available()
    DEVICE = "cuda" if USE_GPU else "cpu"
    
    # Param√®tres TTS optimis√©s pour le fran√ßais
    TTS_CONFIG = {
        "language": "fr",
        "speed": 1.0,
        "emotion": "neutral",
        "split_sentences": True,
        "temperature": 0.75,  # Contr√¥le la variabilit√©
        "top_k": 50,          # Limite les choix de tokens
        "top_p": 0.85,        # Nucleus sampling
        "repetition_penalty": 1.1,  # √âvite les r√©p√©titions
        "length_penalty": 1.0
    }
    
    # Limites de traitement
    MAX_TEXT_LENGTH = 500
    CHUNK_OVERLAP = 50

# Patch pour la s√©rialisation
torch.serialization.add_safe_globals([XttsArgs])

class FrenchTextProcessor:
    """Pr√©processeur de texte optimis√© pour le fran√ßais"""
    
    @staticmethod
    def clean_text(text: str) -> str:
        """Nettoie et normalise le texte pour une meilleure prononciation"""
        if not text or pd.isna(text):
            return ""
        
        text = str(text).strip()
        
        # Corrections phon√©tiques fran√ßaises
        corrections = {
            # Acronymes et sigles
            'AI': 'Intelligence Artificielle',
            'IA': 'Intelligence Artificielle',
            'ML': 'Machine Learning',
            'API': 'A-P-I',
            'URL': 'U-R-L',
            'HTTP': 'H-T-T-P',
            'GPU': 'G-P-U',
            'CPU': 'C-P-U',
            
            # Mots techniques anglais
            'cloud computing': 'informatique en nuage',
            'machine learning': 'apprentissage automatique',
            'deep learning': 'apprentissage profond',
            'data science': 'science des donn√©es',
            'big data': 'm√©gadonn√©es',
            'workflow': 'flux de travail',
            'framework': 'cadre de d√©veloppement',
            
            # Am√©liorations phon√©tiques
            'vs': 'versus',
            '&': 'et',
            '@': 'arobase',
            '%': 'pour cent',
            '‚Ç¨': 'euros',
            '$': 'dollars',
            
            # Corrections de liaison
            ' et ': ' √© ',
            ' est ': ' √® ',
            ' un ': ' un-n ',
            ' en ': ' an ',
        }
        
        for old, new in corrections.items():
            text = text.replace(old, new)
        
        # Am√©lioration de la ponctuation pour des pauses naturelles
        text = re.sub(r'([.!?])', r'\1 [pause_longue] ', text)
        text = re.sub(r'([,;:])', r'\1 [pause_courte] ', text)
        text = re.sub(r'([()[\]])', r' \1 ', text)
        
        # Nettoyage des espaces multiples
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    @staticmethod
    def split_text(text: str, max_length: int = VoiceConfig.MAX_TEXT_LENGTH) -> List[str]:
        """Divise le texte en segments pour √©viter les timeouts"""
        if len(text) <= max_length:
            return [text]
        
        # Division par phrases
        sentences = re.split(r'(?<=[.!?])\s+', text)
        chunks = []
        current_chunk = ""
        
        for sentence in sentences:
            test_chunk = f"{current_chunk} {sentence}".strip()
            
            if len(test_chunk) <= max_length:
                current_chunk = test_chunk
            else:
                if current_chunk:
                    chunks.append(current_chunk)
                
                # Si une phrase est trop longue, la diviser par mots
                if len(sentence) > max_length:
                    words = sentence.split()
                    temp_chunk = ""
                    
                    for word in words:
                        test_word_chunk = f"{temp_chunk} {word}".strip()
                        if len(test_word_chunk) <= max_length:
                            temp_chunk = test_word_chunk
                        else:
                            if temp_chunk:
                                chunks.append(temp_chunk)
                            temp_chunk = word
                    
                    if temp_chunk:
                        current_chunk = temp_chunk
                else:
                    current_chunk = sentence
        
        if current_chunk:
            chunks.append(current_chunk)
        
        return chunks

class VoiceGenerator:
    """G√©n√©rateur vocal optimis√©"""
    
    def __init__(self):
        self.config = VoiceConfig()
        self.processor = FrenchTextProcessor()
        self.tts = None
        self._setup_directories()
        self._initialize_tts()
    
    def _setup_directories(self):
        """Cr√©e les dossiers n√©cessaires"""
        Path(self.config.OUTPUT_DIR).mkdir(exist_ok=True)
        print(f"üìÅ Dossier de sortie: {self.config.OUTPUT_DIR}")
    
    def _initialize_tts(self):
        """Initialise le mod√®le TTS avec optimisations"""
        print(f"üî• Initialisation XTTS-v2 sur {self.config.DEVICE}")
        print(f"   GPU disponible: {self.config.USE_GPU}")
        
        if self.config.USE_GPU:
            print(f"   GPU: {torch.cuda.get_device_name(0)}")
            print(f"   M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        
        start_time = time.time()
        
        try:
            self.tts = TTS(
                model_name="tts_models/multilingual/multi-dataset/xtts_v2",
                gpu=self.config.USE_GPU
            )
            
            # Optimisations GPU
            if self.config.USE_GPU:
                torch.backends.cudnn.benchmark = True
                torch.backends.cudnn.deterministic = False
                torch.cuda.empty_cache()
            
            load_time = time.time() - start_time
            print(f"‚úÖ Mod√®le charg√© en {load_time:.1f}s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {e}")
            raise
    
    def _validate_reference_voice(self) -> bool:
        """V√©rifie que le fichier de r√©f√©rence vocal existe"""
        if not Path(self.config.REFERENCE_WAV).exists():
            print(f"‚ùå Fichier de r√©f√©rence introuvable: {self.config.REFERENCE_WAV}")
            print("üí° Assurez-vous d'avoir un fichier .wav de r√©f√©rence pour le clonage de voix")
            return False
        print(f"‚úÖ Fichier de r√©f√©rence trouv√©: {self.config.REFERENCE_WAV}")
        return True
    
    def _safe_filename(self, title: str, slide_number: int) -> str:
        """G√©n√®re un nom de fichier s√ªr"""
        # Nettoie le titre pour en faire un nom de fichier valide
        clean_title = re.sub(r'[^\w\s-]', '', str(title))
        clean_title = re.sub(r'[-\s]+', '_', clean_title)
        clean_title = clean_title[:50]  # Limite la longueur
        
        return f"Slide{slide_number:03d}_{clean_title}_optimized.wav"
    
    def generate_voice(self, text: str, output_path: str) -> bool:
        """G√©n√®re un fichier audio √† partir du texte"""
        try:
            # Pr√©processing du texte
            processed_text = self.processor.clean_text(text)
            if not processed_text:
                print("‚ö†Ô∏è Texte vide apr√®s pr√©processing")
                return False
            
            # Division en segments si n√©cessaire
            text_chunks = self.processor.split_text(processed_text)
            
            if len(text_chunks) == 1:
                # G√©n√©ration simple
                self.tts.tts_to_file(
                    text=text_chunks[0],
                    file_path=output_path,
                    speaker_wav=self.config.REFERENCE_WAV,
                    **self.config.TTS_CONFIG
                )
            else:
                # G√©n√©ration par segments et concat√©nation
                print(f"   üìù Traitement en {len(text_chunks)} segments")
                segment_files = []
                
                for i, chunk in enumerate(text_chunks):
                    segment_file = output_path.replace('.wav', f'_segment_{i}.wav')
                    
                    self.tts.tts_to_file(
                        text=chunk,
                        file_path=segment_file,
                        speaker_wav=self.config.REFERENCE_WAV,
                        **self.config.TTS_CONFIG
                    )
                    segment_files.append(segment_file)
                
                # Concat√©nation des segments (n√©cessiterait une biblioth√®que audio)
                # Pour l'instant, on garde le premier segment
                if segment_files:
                    os.rename(segment_files[0], output_path)
                    # Nettoyer les segments temporaires
                    for seg_file in segment_files[1:]:
                        if os.path.exists(seg_file):
                            os.remove(seg_file)
            
            # Nettoyage m√©moire GPU
            if self.config.USE_GPU:
                torch.cuda.empty_cache()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur de g√©n√©ration: {e}")
            return False
    
    def process_excel_file(self) -> None:
        """Traite le fichier Excel et g√©n√®re tous les audios"""
        # V√©rifications pr√©liminaires
        if not Path(self.config.EXCEL_PATH).exists():
            raise FileNotFoundError(f"Fichier Excel introuvable: {self.config.EXCEL_PATH}")
        
        if not self._validate_reference_voice():
            return
        
        # Chargement du fichier Excel
        print(f"üìä Chargement de {self.config.EXCEL_PATH}")
        try:
            data = pd.read_excel(self.config.EXCEL_PATH)
        except Exception as e:
            raise ValueError(f"Erreur lors du chargement d'Excel: {e}")
        
        # V√©rification des colonnes
        required_columns = {'Slide Number', 'Slide Title', 'Voice Over Text'}
        missing_columns = required_columns - set(data.columns)
        if missing_columns:
            raise ValueError(f"Colonnes manquantes: {missing_columns}")
        
        print(f"üìà {len(data)} slides √† traiter")
        
        # Variables de suivi
        success_count = 0
        error_count = 0
        start_time = time.time()
        
        # Traitement de chaque ligne
        for index, row in tqdm(data.iterrows(), total=len(data), desc="üéµ G√©n√©ration vocale"):
            slide_number = row['Slide Number']
            slide_title = row['Slide Title']
            voice_text = row['Voice Over Text']
            
            # Validation des donn√©es
            if pd.isna(voice_text) or not str(voice_text).strip():
                print(f"‚ö†Ô∏è Slide {slide_number}: Texte vide, ignor√©")
                continue
            
            # G√©n√©ration du nom de fichier
            output_filename = self._safe_filename(slide_title, slide_number)
            output_path = os.path.join(self.config.OUTPUT_DIR, output_filename)
            
            # V√©rifier si le fichier existe d√©j√†
            if os.path.exists(output_path):
                print(f"‚è≠Ô∏è Slide {slide_number}: Fichier existant, ignor√©")
                continue
            
            # G√©n√©ration
            print(f"üé§ Slide {slide_number}: {slide_title}")
            if self.generate_voice(str(voice_text), output_path):
                success_count += 1
                print(f"‚úÖ G√©n√©r√©: {output_filename}")
            else:
                error_count += 1
                print(f"‚ùå √âchec: Slide {slide_number}")
        
        # Rapport final
        total_time = time.time() - start_time
        print(f"\nüéâ G√©n√©ration termin√©e!")
        print(f"   ‚úÖ Succ√®s: {success_count}")
        print(f"   ‚ùå Erreurs: {error_count}")
        print(f"   ‚è±Ô∏è Temps total: {total_time:.1f}s")
        print(f"   üìÅ Fichiers dans: {self.config.OUTPUT_DIR}")

def main():
    """Fonction principale"""
    print("üéµ G√©n√©rateur vocal optimis√© pour le fran√ßais")
    print("=" * 50)
    
    try:
        generator = VoiceGenerator()
        generator.process_excel_file()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"\nüí• Erreur critique: {e}")
        raise

if __name__ == "__main__":
    main()
